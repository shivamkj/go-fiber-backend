package course

import (
	"database/sql"
	"time"

	gofiber "github.com/gofiber/fiber/v2"
	"github.com/qnify/api-server/utils/consts"
	. "github.com/qnify/api-server/utils/fiber"
	. "github.com/qnify/api-server/utils/helper"
)

func (m *courseModule) getCourse(c *gofiber.Ctx) error {
	id := c.Params("id")

	course, err := m.courseById(id)
	if err != nil {
		if err == sql.ErrNoRows {
			return c.Status(404).SendString("Course not found")
		}
		return err
	}

	return c.JSON(course)
}

func (m *courseModule) getAllCourses(c *gofiber.Ctx) error {
	filter, err := ParseQueryFilter(c)
	if err != nil {
		return err
	}

	courses, err := m.listCourse(filter)
	if err != nil {
		return err
	}

	return c.JSON(courses)
}

func (m *courseModule) createCourse(c *gofiber.Ctx) error {
	var req Course
	if err := ParseJSON(c, &req); err != nil {
		return err
	}

	// Validate & Add default values
	if errs := isValidCourse(&req); len(*errs) != 0 {
		return c.Status(400).JSON(gofiber.Map{"error": "Invalid data", "errors": errs})
	}
	req.CreatedAt = time.Now().Unix()
	req.UpdatedAt = time.Now().Unix()

	_, err := m.newCourse(&req) // id is generated by application, db value might not be correct
	if err != nil {
		return err
	}

	return c.JSON(gofiber.Map{"data": req})
}

func (m *courseModule) updateCourse(c *gofiber.Ctx) error {
	id := c.Params("id")
	var req Course
	if err := ParseJSON(c, &req); err != nil {
		return err
	}

	// Validate & add default values
	if errs := isValidCourse(&req); len(*errs) != 0 {
		return c.Status(400).JSON(gofiber.Map{"error": "Invalid data", "errors": errs})
	}
	req.UpdatedAt = time.Now().Unix()

	if err := m.setCourse(id, &req); err != nil {
		return err
	}

	return c.SendString("Course updated successfully")
}

func (m *courseModule) deleteCourse(c *gofiber.Ctx) error {
	id := c.Params("id")

	if err := m.delCourse(id); err != nil {
		return err
	}

	return c.SendString("Course deleted successfully")
}

func isValidCourse(c *Course) *[]string {
	var errs []string
	Verify(len(c.Name) <= consts.StrMaxLen, "course name too long, should be less than 256 characters", &errs)
	Verify(c.Name != "", "course name should not be empty", &errs)
	Verify(*c.Thumbnail == "" || IsValidURL(*c.Thumbnail), "invalid thumbnail url", &errs)
	Verify(c.Price != 0, "price shouldn't be 0", &errs)
	return &errs
}
